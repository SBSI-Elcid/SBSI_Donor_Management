// <auto-generated />
using System;
using BBIS.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BBIS.Database.Migrations
{
    [DbContext(typeof(BBDbContext))]
    [Migration("20230113041546_Add_sp_GetDonorReport")]
    partial class Add_sp_GetDonorReport
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BBIS.Domain.Models.ApplicationSetting", b =>
                {
                    b.Property<Guid>("ApplicationSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SettingKey")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SettingValue")
                        .HasColumnType("varchar(100)");

                    b.HasKey("ApplicationSettingId");

                    b.ToTable("ApplicationSetting", (string)null);

                    b.HasData(
                        new
                        {
                            ApplicationSettingId = new Guid("1891de09-2589-46da-ac21-f7053e2027aa"),
                            IsActive = true,
                            SettingKey = "BloodCollectionUnitOfMeasure",
                            SettingValue = "mL"
                        },
                        new
                        {
                            ApplicationSettingId = new Guid("f89d1eaf-94f0-4993-93e0-b9175dbe8f04"),
                            IsActive = true,
                            SettingKey = "BloodComponentsUnitOfMeasure",
                            SettingValue = "mL"
                        },
                        new
                        {
                            ApplicationSettingId = new Guid("41f1542b-2a84-40bf-b39e-774c75265853"),
                            IsActive = true,
                            SettingKey = "InstitutionName",
                            SettingValue = "SBSI"
                        });
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodComponent", b =>
                {
                    b.Property<Guid>("BloodComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("ExpiryInDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NotifyOnDaysBefore")
                        .HasColumnType("int");

                    b.HasKey("BloodComponentId");

                    b.ToTable("BloodComponent", (string)null);

                    b.HasData(
                        new
                        {
                            BloodComponentId = new Guid("d7431819-53dd-4bfc-a4e9-fed3139a4998"),
                            ComponentName = "Packed Red Blood Cells",
                            ExpiryInDays = 35,
                            IsActive = true,
                            NotifyOnDaysBefore = 0
                        },
                        new
                        {
                            BloodComponentId = new Guid("2247d0fd-d546-40e7-b2f3-cfc64d6e48a0"),
                            ComponentName = "Fresh Frozen Plasma",
                            ExpiryInDays = 365,
                            IsActive = true,
                            NotifyOnDaysBefore = 0
                        },
                        new
                        {
                            BloodComponentId = new Guid("b03ac043-8569-4f7d-97d1-e8bbdb1a360a"),
                            ComponentName = "Platelet Concentrate",
                            ExpiryInDays = 5,
                            IsActive = true,
                            NotifyOnDaysBefore = 0
                        },
                        new
                        {
                            BloodComponentId = new Guid("601f8624-1984-4fb3-bd93-30dfb5ca2835"),
                            ComponentName = "Leukoreduced Red Blood Cells",
                            ExpiryInDays = 5,
                            IsActive = true,
                            NotifyOnDaysBefore = 0
                        });
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodComponentChecklist", b =>
                {
                    b.Property<Guid>("BloodComponentChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ChecklistDescription")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAdult")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BloodComponentChecklistId");

                    b.HasIndex("BloodComponentId");

                    b.ToTable("BloodComponentChecklist", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodScreeningTestOrder", b =>
                {
                    b.Property<Guid>("BloodScreeningTestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Result")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("TestOrderId")
                        .HasColumnType("char(36)");

                    b.HasKey("BloodScreeningTestOrderId");

                    b.HasIndex("TestOrderId")
                        .IsUnique();

                    b.ToTable("BloodScreeningTestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodTestType", b =>
                {
                    b.Property<Guid>("BloodTestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeName")
                        .HasColumnType("varchar(80)");

                    b.HasKey("BloodTestTypeId");

                    b.ToTable("BloodTestType", (string)null);

                    b.HasData(
                        new
                        {
                            BloodTestTypeId = new Guid("ba180ddd-c55c-419e-870a-ca45ec8f91d9"),
                            IsActive = true,
                            TypeName = "HIV"
                        },
                        new
                        {
                            BloodTestTypeId = new Guid("027d2030-29e8-4dd8-a227-92312815bdf8"),
                            IsActive = true,
                            TypeName = "HCV"
                        },
                        new
                        {
                            BloodTestTypeId = new Guid("a9e9fafe-9a2a-4d4f-b1da-ecd7f64af5ce"),
                            IsActive = true,
                            TypeName = "Syphilis"
                        },
                        new
                        {
                            BloodTestTypeId = new Guid("29d3082d-e681-466a-aeb1-2ed9440fba11"),
                            IsActive = true,
                            TypeName = "HBsAg"
                        },
                        new
                        {
                            BloodTestTypeId = new Guid("94f2e936-5ba0-4bdb-8d31-0e2260f09075"),
                            IsActive = true,
                            TypeName = "Malaria"
                        });
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodTypingTestOrder", b =>
                {
                    b.Property<Guid>("BloodTypingTestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodRh")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BloodType")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Control")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FTAntiA")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FTAntiAB")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FTAntiB")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FTAntiD")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FTAntiD2")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RTACells")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RTBCells")
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("TestOrderId")
                        .HasColumnType("char(36)");

                    b.HasKey("BloodTypingTestOrderId");

                    b.HasIndex("TestOrderId")
                        .IsUnique();

                    b.ToTable("BloodTypingTestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.CoombsTestOrder", b =>
                {
                    b.Property<Guid>("CoombsTestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DATResult")
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IATResult")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("TestOrderId")
                        .HasColumnType("char(36)");

                    b.HasKey("CoombsTestOrderId");

                    b.HasIndex("TestOrderId")
                        .IsUnique();

                    b.ToTable("CoombsTestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.CrossMatchTestOrder", b =>
                {
                    b.Property<Guid>("CrossMatchTestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CrossMatchType")
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DonorUnitSerialNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LISS_AGH")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Result")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("TestOrderId")
                        .HasColumnType("char(36)");

                    b.HasKey("CrossMatchTestOrderId");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("DonorTransactionId");

                    b.HasIndex("TestOrderId");

                    b.ToTable("CrossMatchTestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Donor", b =>
                {
                    b.Property<Guid>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressBarangay")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("AddressMunicipality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AddressProvinceOrCity")
                        .IsRequired()
                        .HasColumnType("varchar(70)");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressZipcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CivilStatus")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyIdNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Education")
                        .HasColumnType("varchar(70)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OtherNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PRCNo")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Religion")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("SchoolIdNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SssGsisBirNo")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("TelNo")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("WorkName")
                        .HasColumnType("varchar(90)");

                    b.HasKey("DonorId");

                    b.ToTable("Donor", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorBloodCollection", b =>
                {
                    b.Property<Guid>("DonorBloodCollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("CollectedBloodAmount")
                        .HasColumnType("double");

                    b.Property<string>("CollectionSubType")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("CollectionType")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FacilitatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("MedicationGiven")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UnitOfMeasurement")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UnwellReason")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DonorBloodCollectionId");

                    b.HasIndex("DonorTransactionId")
                        .IsUnique();

                    b.HasIndex("FacilitatedById");

                    b.ToTable("DonorBloodCollection", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorDeferral", b =>
                {
                    b.Property<Guid>("DonorDeferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DeferralStatus")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DonorDeferralId");

                    b.HasIndex("DonorTransactionId")
                        .IsUnique();

                    b.ToTable("DonorDeferral", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorInitialScreening", b =>
                {
                    b.Property<Guid>("DonorInitialScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodType")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DonationType")
                        .HasColumnType("varchar(25)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<double>("HCT")
                        .HasColumnType("double");

                    b.Property<double>("HGB")
                        .HasColumnType("double");

                    b.Property<string>("InHouseTypeValue")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MobileBloodDonationOrganizer")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileBloodDonationPlace")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameOfPatient")
                        .HasColumnType("varchar(100)");

                    b.Property<double>("PLTCount")
                        .HasColumnType("double");

                    b.Property<string>("PatientBloodType")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PatientHospital")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientNoOfUnits")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PatientWBOrComponent")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PrcOffice")
                        .HasColumnType("varchar(70)");

                    b.Property<double>("RBC")
                        .HasColumnType("double");

                    b.Property<double>("SPGR")
                        .HasColumnType("double");

                    b.Property<Guid>("ScreenById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ScreenDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("WBC")
                        .HasColumnType("double");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("DonorInitialScreeningId");

                    b.HasIndex("DonorTransactionId")
                        .IsUnique();

                    b.ToTable("DonorInitialScreening", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorMedicalHistory", b =>
                {
                    b.Property<Guid>("DonorMedicalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Answer")
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("DonorRegistrationId")
                        .HasColumnType("char(36)");

                    b.Property<int>("MedicalQuestionnaireId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DonorMedicalHistoryId");

                    b.HasIndex("DonorRegistrationId");

                    b.HasIndex("MedicalQuestionnaireId");

                    b.ToTable("DonorMedicalHistory", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorPhysicalExamination", b =>
                {
                    b.Property<Guid>("DonorPhysicalExaminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodBagType")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BloodPressure")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("DateOfExamination")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoctorName")
                        .HasColumnType("varchar(60)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FacilitatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("FailedRemarks")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("GeneralStatus")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HEENT")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HeartAndLungs")
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Pulse")
                        .HasColumnType("double");

                    b.Property<string>("ResultStatus")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Skin")
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.HasKey("DonorPhysicalExaminationId");

                    b.HasIndex("DonorTransactionId")
                        .IsUnique();

                    b.ToTable("DonorPhysicalExamination", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorRecentDonation", b =>
                {
                    b.Property<Guid>("DonorRecentDonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Agency")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("DateOfRecentDonation")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("NumberOfDonation")
                        .HasColumnType("int");

                    b.Property<string>("PlaceOfRecentDonation")
                        .HasColumnType("varchar(90)");

                    b.HasKey("DonorRecentDonationId");

                    b.HasIndex("DonorId");

                    b.ToTable("DonorRecentDonation", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorRegistration", b =>
                {
                    b.Property<Guid>("DonorRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressBarangay")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("AddressMunicipality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AddressProvinceOrCity")
                        .IsRequired()
                        .HasColumnType("varchar(70)");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressZipcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CivilStatus")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyIdNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Education")
                        .HasColumnType("varchar(70)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OtherNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PRCNo")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Religion")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("SchoolIdNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SssGsisBirNo")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("TelNo")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("WorkName")
                        .HasColumnType("varchar(90)");

                    b.HasKey("DonorRegistrationId");

                    b.ToTable("DonorRegistration", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTestOrder", b =>
                {
                    b.Property<Guid>("DonorTestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("TestCompleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("DonorTestOrderId");

                    b.HasIndex("DonorTransactionId")
                        .IsUnique();

                    b.ToTable("DonorTestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTestOrderTestType", b =>
                {
                    b.Property<Guid>("DonorTestOrderTestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodTestTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DonorTestOrderId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsReactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(75)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("DonorTestOrderTestTypeId");

                    b.HasIndex("BloodTestTypeId");

                    b.HasIndex("DonorTestOrderId");

                    b.ToTable("DonorTestOrderTestType", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTransaction", b =>
                {
                    b.Property<Guid>("DonorTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("BloodIsSafeToTransfuse")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BloodRh")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("DOHNBBNetsBarcode")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("DateOfDonation")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DonorRegistrationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DonorStatus")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("FinalBloodType")
                        .HasColumnType("varchar(4)");

                    b.Property<bool>("IsOffline")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSync")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PRCBloodDonorNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UnitSerialNumber")
                        .HasColumnType("varchar(30)");

                    b.HasKey("DonorTransactionId");

                    b.HasIndex("DonorId");

                    b.HasIndex("DonorRegistrationId");

                    b.ToTable("DonorTransaction", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Institution", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(80)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("InstitutionId");

                    b.ToTable("Institution", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventoryItem", b =>
                {
                    b.Property<Guid>("InventoryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodRh")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BloodType")
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("InventorySourceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("NotifyBeforeExpireOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UnitMeasure")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("UnitSerialNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Volume")
                        .HasColumnType("double");

                    b.HasKey("InventoryItemId");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("InventorySourceId");

                    b.ToTable("InventoryItem", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventorySource", b =>
                {
                    b.Property<Guid>("InventorySourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DonorTranctionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsExternalSource")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("InventorySourceId");

                    b.HasIndex("DonorTranctionId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InventorySource", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Lookup", b =>
                {
                    b.Property<int>("LookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LookupKey")
                        .HasColumnType("varchar(30)");

                    b.HasKey("LookupId");

                    b.ToTable("Lookup", (string)null);

                    b.HasData(
                        new
                        {
                            LookupId = 1,
                            Description = "Blood type options",
                            IsActive = true,
                            LookupKey = "lookup.BloodTypes"
                        },
                        new
                        {
                            LookupId = 2,
                            Description = "Blood Donation Type options",
                            IsActive = true,
                            LookupKey = "lookup.DonationTypes"
                        },
                        new
                        {
                            LookupId = 3,
                            Description = "In house type options",
                            IsActive = true,
                            LookupKey = "lookup.InHouseTypes"
                        },
                        new
                        {
                            LookupId = 4,
                            Description = "Blood bag type options",
                            IsActive = true,
                            LookupKey = "lookup.BloodBagTypes"
                        },
                        new
                        {
                            LookupId = 5,
                            Description = "Agency type options",
                            IsActive = true,
                            LookupKey = "lookup.AgencyTypes"
                        },
                        new
                        {
                            LookupId = 6,
                            Description = "Donor Status options",
                            IsActive = true,
                            LookupKey = "lookup.DonorStatus"
                        },
                        new
                        {
                            LookupId = 7,
                            Description = "Blood Bag Size options",
                            IsActive = true,
                            LookupKey = "lookup.BloodBagSizeTypes"
                        },
                        new
                        {
                            LookupId = 8,
                            Description = "Special Bag type options",
                            IsActive = true,
                            LookupKey = "lookup.SpecialBagTypes"
                        },
                        new
                        {
                            LookupId = 9,
                            Description = "Apheresis Bag type options",
                            IsActive = true,
                            LookupKey = "lookup.ApheresisBagTypes"
                        },
                        new
                        {
                            LookupId = 10,
                            Description = "Blood Bag Collection Type options",
                            IsActive = true,
                            LookupKey = "lookup.BloodBagCollectionTypes"
                        },
                        new
                        {
                            LookupId = 11,
                            Description = "Civil Status options",
                            IsActive = true,
                            LookupKey = "lookup.CivilStatus"
                        },
                        new
                        {
                            LookupId = 12,
                            Description = "Deferral Status options",
                            IsActive = true,
                            LookupKey = "lookup.DeferralStatus"
                        },
                        new
                        {
                            LookupId = 13,
                            Description = "Physical Exam Result options",
                            IsActive = true,
                            LookupKey = "lookup.PhysicalExamResult"
                        },
                        new
                        {
                            LookupId = 14,
                            Description = "Priority Level options",
                            IsActive = true,
                            LookupKey = "lookup.PriorityLevel"
                        },
                        new
                        {
                            LookupId = 15,
                            Description = "Cross Matching options",
                            IsActive = true,
                            LookupKey = "lookup.CrossMatchingOptions"
                        },
                        new
                        {
                            LookupId = 16,
                            Description = "Patient Type options",
                            IsActive = true,
                            LookupKey = "lookup.PatientType"
                        },
                        new
                        {
                            LookupId = 17,
                            Description = "Priority Level options",
                            IsActive = true,
                            LookupKey = "lookup.Membership"
                        },
                        new
                        {
                            LookupId = 18,
                            Description = "Cross Match Types",
                            IsActive = true,
                            LookupKey = "lookup.CrossMatchTypes"
                        });
                });

            modelBuilder.Entity("BBIS.Domain.Models.LookupOption", b =>
                {
                    b.Property<int>("LookupOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LookupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(50)");

                    b.HasKey("LookupOptionId");

                    b.HasIndex("LookupId");

                    b.ToTable("LookupOption", (string)null);

                    b.HasData(
                        new
                        {
                            LookupOptionId = 1,
                            IsActive = true,
                            LookupId = 1,
                            Name = "O",
                            Value = "O"
                        },
                        new
                        {
                            LookupOptionId = 2,
                            IsActive = true,
                            LookupId = 1,
                            Name = "A",
                            Value = "A"
                        },
                        new
                        {
                            LookupOptionId = 3,
                            IsActive = true,
                            LookupId = 1,
                            Name = "B",
                            Value = "B"
                        },
                        new
                        {
                            LookupOptionId = 4,
                            IsActive = true,
                            LookupId = 1,
                            Name = "AB",
                            Value = "AB"
                        },
                        new
                        {
                            LookupOptionId = 5,
                            IsActive = true,
                            LookupId = 2,
                            Name = "In-House",
                            Value = "InHouse"
                        },
                        new
                        {
                            LookupOptionId = 6,
                            IsActive = true,
                            LookupId = 2,
                            Name = "Mobile Blood Donation",
                            Value = "Mobile"
                        },
                        new
                        {
                            LookupOptionId = 7,
                            IsActive = true,
                            LookupId = 3,
                            Name = "WALK-IN/VOLUNTARY",
                            Value = "WalkInOrVolountary"
                        },
                        new
                        {
                            LookupOptionId = 8,
                            IsActive = true,
                            LookupId = 3,
                            Name = "REPLACEMENT",
                            Value = "Replacement"
                        },
                        new
                        {
                            LookupOptionId = 9,
                            IsActive = true,
                            LookupId = 3,
                            Name = "PATIENT-DIRECTED",
                            Value = "PatientDirected"
                        },
                        new
                        {
                            LookupOptionId = 10,
                            IsActive = true,
                            LookupId = 4,
                            Name = "Single",
                            Value = "Single"
                        },
                        new
                        {
                            LookupOptionId = 11,
                            IsActive = true,
                            LookupId = 4,
                            Name = "Multiple",
                            Value = "Multiple"
                        },
                        new
                        {
                            LookupOptionId = 12,
                            IsActive = true,
                            LookupId = 4,
                            Name = "Top & Bottom",
                            Value = "TopAndBottom"
                        },
                        new
                        {
                            LookupOptionId = 13,
                            IsActive = true,
                            LookupId = 4,
                            Name = "Apheresis",
                            Value = "Apheresis"
                        },
                        new
                        {
                            LookupOptionId = 14,
                            IsActive = true,
                            LookupId = 5,
                            Name = "Red Cross",
                            Value = "RedCross"
                        },
                        new
                        {
                            LookupOptionId = 15,
                            IsActive = true,
                            LookupId = 5,
                            Name = "Hospital",
                            Value = "Hospital"
                        },
                        new
                        {
                            LookupOptionId = 16,
                            IsActive = true,
                            LookupId = 6,
                            Name = "For Initial Screening",
                            Value = "ForInitialScreening"
                        },
                        new
                        {
                            LookupOptionId = 17,
                            IsActive = true,
                            LookupId = 6,
                            Name = "For Physical Examination",
                            Value = "ForPhysicalExamination"
                        },
                        new
                        {
                            LookupOptionId = 18,
                            IsActive = true,
                            LookupId = 6,
                            Name = "For Blood Collection",
                            Value = "ForBloodCollection"
                        },
                        new
                        {
                            LookupOptionId = 19,
                            IsActive = true,
                            LookupId = 6,
                            Name = "For Laboratory Test",
                            Value = "ForLaboratoryTest"
                        },
                        new
                        {
                            LookupOptionId = 20,
                            IsActive = true,
                            LookupId = 6,
                            Name = "Success",
                            Value = "Success"
                        },
                        new
                        {
                            LookupOptionId = 21,
                            IsActive = true,
                            LookupId = 6,
                            Name = "Deferred",
                            Value = "Deferred"
                        },
                        new
                        {
                            LookupOptionId = 22,
                            IsActive = true,
                            LookupId = 7,
                            Name = "Single",
                            Value = "Single"
                        },
                        new
                        {
                            LookupOptionId = 23,
                            IsActive = true,
                            LookupId = 7,
                            Name = "Double",
                            Value = "Double"
                        },
                        new
                        {
                            LookupOptionId = 24,
                            IsActive = true,
                            LookupId = 7,
                            Name = "Tripple",
                            Value = "Tripple"
                        },
                        new
                        {
                            LookupOptionId = 25,
                            IsActive = true,
                            LookupId = 7,
                            Name = "Quadruple",
                            Value = "Quadruple"
                        },
                        new
                        {
                            LookupOptionId = 26,
                            IsActive = true,
                            LookupId = 8,
                            Name = "FK T&B",
                            Value = "FK T&B"
                        },
                        new
                        {
                            LookupOptionId = 27,
                            IsActive = true,
                            LookupId = 8,
                            Name = "TRM T&B",
                            Value = "TRM T&B"
                        },
                        new
                        {
                            LookupOptionId = 28,
                            IsActive = true,
                            LookupId = 9,
                            Name = "FRES",
                            Value = "FRES"
                        },
                        new
                        {
                            LookupOptionId = 29,
                            IsActive = true,
                            LookupId = 9,
                            Name = "AMI",
                            Value = "AMI"
                        },
                        new
                        {
                            LookupOptionId = 30,
                            IsActive = true,
                            LookupId = 9,
                            Name = "HAE",
                            Value = "HAE"
                        },
                        new
                        {
                            LookupOptionId = 31,
                            IsActive = true,
                            LookupId = 9,
                            Name = "TRI",
                            Value = "TRI"
                        },
                        new
                        {
                            LookupOptionId = 32,
                            IsActive = true,
                            LookupId = 10,
                            Name = "KARMI",
                            Value = "KARMI"
                        },
                        new
                        {
                            LookupOptionId = 33,
                            IsActive = true,
                            LookupId = 10,
                            Name = "TERUMO",
                            Value = "TERUMO"
                        },
                        new
                        {
                            LookupOptionId = 34,
                            IsActive = true,
                            LookupId = 10,
                            Name = "SPECIAL BAG",
                            Value = "SpecialBag"
                        },
                        new
                        {
                            LookupOptionId = 35,
                            IsActive = true,
                            LookupId = 10,
                            Name = "APHERESIS",
                            Value = "Apheresis"
                        },
                        new
                        {
                            LookupOptionId = 36,
                            IsActive = true,
                            LookupId = 11,
                            Name = "Single",
                            Value = "Single"
                        },
                        new
                        {
                            LookupOptionId = 37,
                            IsActive = true,
                            LookupId = 11,
                            Name = "Married",
                            Value = "Married"
                        },
                        new
                        {
                            LookupOptionId = 38,
                            IsActive = true,
                            LookupId = 11,
                            Name = "Separated",
                            Value = "Separated"
                        },
                        new
                        {
                            LookupOptionId = 39,
                            IsActive = true,
                            LookupId = 11,
                            Name = "Widow",
                            Value = "Widow"
                        },
                        new
                        {
                            LookupOptionId = 40,
                            IsActive = true,
                            LookupId = 12,
                            Name = "Permanent",
                            Value = "Permanent"
                        },
                        new
                        {
                            LookupOptionId = 41,
                            IsActive = true,
                            LookupId = 12,
                            Name = "Temporary",
                            Value = "Temporary"
                        },
                        new
                        {
                            LookupOptionId = 42,
                            IsActive = true,
                            LookupId = 13,
                            Name = "Passed",
                            Value = "Passed"
                        },
                        new
                        {
                            LookupOptionId = 43,
                            IsActive = true,
                            LookupId = 13,
                            Name = "Temporary Deferral",
                            Value = "TemporaryDeferral"
                        },
                        new
                        {
                            LookupOptionId = 44,
                            IsActive = true,
                            LookupId = 13,
                            Name = "Permanent Deferral",
                            Value = "PermanentDeferral"
                        },
                        new
                        {
                            LookupOptionId = 45,
                            IsActive = true,
                            LookupId = 13,
                            Name = "Refused",
                            Value = "Refused"
                        },
                        new
                        {
                            LookupOptionId = 46,
                            IsActive = true,
                            LookupId = 14,
                            Name = "Routine",
                            Value = "Routine"
                        },
                        new
                        {
                            LookupOptionId = 47,
                            IsActive = true,
                            LookupId = 14,
                            Name = "STAT",
                            Value = "STAT"
                        },
                        new
                        {
                            LookupOptionId = 48,
                            IsActive = true,
                            LookupId = 14,
                            Name = "Schedule",
                            Value = "Schedule"
                        },
                        new
                        {
                            LookupOptionId = 49,
                            IsActive = true,
                            LookupId = 15,
                            Name = "Saline Phase Only",
                            Value = "SalinePhaseOnly"
                        },
                        new
                        {
                            LookupOptionId = 50,
                            IsActive = true,
                            LookupId = 15,
                            Name = "Saline Albumin Phase Only",
                            Value = "SalineAlbuminPhaseOnly"
                        },
                        new
                        {
                            LookupOptionId = 51,
                            IsActive = true,
                            LookupId = 15,
                            Name = "Saline Albumin Globulin Phase Only",
                            Value = "SalineAlbuminGlobulinPhaseOnly"
                        },
                        new
                        {
                            LookupOptionId = 52,
                            IsActive = true,
                            LookupId = 16,
                            Name = "Out Patient",
                            Value = "OutPatient"
                        },
                        new
                        {
                            LookupOptionId = 53,
                            IsActive = true,
                            LookupId = 16,
                            Name = "In Patient",
                            Value = "InPatient"
                        },
                        new
                        {
                            LookupOptionId = 54,
                            IsActive = true,
                            LookupId = 17,
                            Name = "GSIS",
                            Value = "GSIS"
                        },
                        new
                        {
                            LookupOptionId = 55,
                            IsActive = true,
                            LookupId = 17,
                            Name = "SSS",
                            Value = "SSS"
                        },
                        new
                        {
                            LookupOptionId = 56,
                            IsActive = true,
                            LookupId = 17,
                            Name = "OCW",
                            Value = "OCW"
                        },
                        new
                        {
                            LookupOptionId = 57,
                            IsActive = true,
                            LookupId = 17,
                            Name = "Dependent",
                            Value = "Dependent"
                        },
                        new
                        {
                            LookupOptionId = 58,
                            IsActive = true,
                            LookupId = 17,
                            Name = "Indigent",
                            Value = "Indigent"
                        },
                        new
                        {
                            LookupOptionId = 59,
                            IsActive = true,
                            LookupId = 18,
                            Name = "Major",
                            Value = "Major"
                        },
                        new
                        {
                            LookupOptionId = 60,
                            IsActive = true,
                            LookupId = 18,
                            Name = "Minor",
                            Value = "Minor"
                        },
                        new
                        {
                            LookupOptionId = 61,
                            IsActive = true,
                            LookupId = 18,
                            Name = "Neutral",
                            Value = "Neutral"
                        },
                        new
                        {
                            LookupOptionId = 62,
                            IsActive = true,
                            LookupId = 18,
                            Name = "AHG",
                            Value = "AHG"
                        },
                        new
                        {
                            LookupOptionId = 63,
                            IsActive = true,
                            LookupId = 6,
                            Name = "Inventory",
                            Value = "Inventory"
                        });
                });

            modelBuilder.Entity("BBIS.Domain.Models.MedicalQuestionnaire", b =>
                {
                    b.Property<int>("MedicalQuestionnaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GenderOption")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("HeaderText")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("QuestionEnglishText")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("QuestionTagalogText")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.HasKey("MedicalQuestionnaireId");

                    b.ToTable("MedicalQuestionnaire", (string)null);

                    b.HasData(
                        new
                        {
                            MedicalQuestionnaireId = 1,
                            OrderNo = 1,
                            QuestionTagalogText = "Do you feel well and healthy today?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 2,
                            OrderNo = 2,
                            QuestionTagalogText = "Have you been refused as a blood donor or told not to donate blood?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 3,
                            OrderNo = 3,
                            QuestionTagalogText = "Will you voluntary allow your blood to be extracted for testing of HIV/AIDS, Hepatitis virus or other contagious diseases?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 4,
                            OrderNo = 4,
                            QuestionTagalogText = "Are you aware that a person with HIV/Hepatitis can still infect other people even if the HIV/AIDS/Hepatitis test result is negative?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 5,
                            OrderNo = 5,
                            QuestionTagalogText = "Have you within the last 12 hours had alcohol?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 6,
                            OrderNo = 6,
                            QuestionTagalogText = "Have you taken aspirin within the last 3 days?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 7,
                            OrderNo = 7,
                            QuestionTagalogText = "Have you taken any medication or have been vaccinated within the last 4 weeks?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 8,
                            OrderNo = 8,
                            QuestionTagalogText = "Have you donated blood, platelets or plasma for the last 3 months?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 9,
                            HeaderText = "FOR THE PAST 6 MONTHS HAVE YOU:",
                            OrderNo = 9,
                            QuestionTagalogText = "Gone to places in the Philippines or other countries known to have ZIKA virus?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 10,
                            OrderNo = 10,
                            QuestionTagalogText = "Had intercourse with a person known and confirmed to be infected with ZIKA virus?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 11,
                            OrderNo = 11,
                            QuestionTagalogText = "Had intercource with a person who had gone to places in the Philippines or other countries known to have ZIKA virus?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 12,
                            HeaderText = "FOR THE PAST 12 MONTHS HAVE YOU:",
                            OrderNo = 12,
                            QuestionTagalogText = "Been a recipient of donated blood for hemophilia or have been operated on or a recipient of organ transplant?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 13,
                            OrderNo = 13,
                            QuestionTagalogText = "Been medically operated on or had tooth extraction?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 14,
                            OrderNo = 14,
                            QuestionTagalogText = "Had tattoo, ear or body piercing, acupuncture, pricked by a needle or accidentally came in contact with blood?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 15,
                            OrderNo = 15,
                            QuestionTagalogText = "Had intercourse with a person with high possibility of not being safe or in exchange for monetary or material things?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 16,
                            OrderNo = 16,
                            QuestionTagalogText = "Had intercourse with a person without protected or deemed not safe?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 17,
                            OrderNo = 17,
                            QuestionTagalogText = "Had experience having jaundice, liver disease or mingled with those with liver diseases?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 18,
                            OrderNo = 18,
                            QuestionTagalogText = "Been locked up or imprisoned?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 19,
                            OrderNo = 19,
                            QuestionTagalogText = "Lived or had relatives in the United Kingdom or Europe?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 20,
                            HeaderText = "HAVE YOU:",
                            OrderNo = 20,
                            QuestionTagalogText = "Travelled or lived apart from your current residence or outside the Philippines?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 21,
                            OrderNo = 21,
                            QuestionTagalogText = "Used prohibited drugs? (inducing, sniffing or injecting)"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 22,
                            OrderNo = 22,
                            QuestionTagalogText = "Taken medications for stopping and treating abnormal bleeding?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 23,
                            OrderNo = 23,
                            QuestionTagalogText = "Tested positive for HIV, Hepatitis, Syphilis or Malaria?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 24,
                            OrderNo = 24,
                            QuestionTagalogText = "Had malaria or liver disease?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 25,
                            OrderNo = 25,
                            QuestionTagalogText = "Had or treated warts in the sensitive parts of the body, syphilis, gonorrhea or any other sexually transmitted diseases?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 26,
                            HeaderText = "HAVE YOU HAD THE FOLLOWING:",
                            OrderNo = 26,
                            QuestionTagalogText = "Cancer, blood disease or hemophilia?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 27,
                            OrderNo = 27,
                            QuestionTagalogText = "Heart disease or chest pain?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 28,
                            OrderNo = 28,
                            QuestionTagalogText = "Lung disease, tuberculosis or asthma?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 29,
                            OrderNo = 29,
                            QuestionTagalogText = "Kidney dusease, diabetes or epilepsy?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 30,
                            OrderNo = 30,
                            QuestionTagalogText = "Small pox, canker sore or ulcers?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 31,
                            OrderNo = 31,
                            QuestionTagalogText = "Other diseases not mentioned or had an operation?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 32,
                            OrderNo = 32,
                            QuestionTagalogText = "Rashes or fever? Is it simultaneous with body aches, rheumatism or eye redness?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 33,
                            GenderOption = "Female",
                            HeaderText = "FOR FEMALE ONLY:",
                            OrderNo = 33,
                            QuestionTagalogText = "Are you currently pregnant? Have you been pregnant in the past?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 34,
                            GenderOption = "Female",
                            OrderNo = 34,
                            QuestionTagalogText = "When was the last time you have given birth?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 35,
                            GenderOption = "Female",
                            OrderNo = 35,
                            QuestionTagalogText = "For the past year, have you had miscarriage or abortion?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 36,
                            GenderOption = "Female",
                            OrderNo = 36,
                            QuestionTagalogText = "Are you currently breast feeding?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 37,
                            GenderOption = "Female",
                            OrderNo = 37,
                            QuestionTagalogText = "When was the last time you had your menstruation?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 38,
                            HeaderText = "ACCEPTANCE CRITERIA IN RELATION TO COVID-19:",
                            OrderNo = 38,
                            QuestionTagalogText = "Do you have colds, coughs and/or fever today?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 39,
                            OrderNo = 39,
                            QuestionTagalogText = "Were you tested for COVID 19 infection? Result and date of last test?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 40,
                            OrderNo = 40,
                            QuestionTagalogText = "Were you diagnosed with COVID 19 infection? Date of last test and treatment?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 41,
                            OrderNo = 41,
                            QuestionTagalogText = "In the last 14 days, have you had close contact with a confirmed case of COVID-19 or cared for an infected patient?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 42,
                            OrderNo = 42,
                            QuestionTagalogText = "In the last 14 days, have you travelled from areas with known community transmissions or any place outside the Philippines?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 43,
                            OrderNo = 43,
                            QuestionTagalogText = "In the last 4 weeks have you come in close contact with wild or exotic animals including its products?"
                        },
                        new
                        {
                            MedicalQuestionnaireId = 44,
                            OrderNo = 44,
                            QuestionTagalogText = "In the last 4 weeks, have you eaten raw or uncooked meat and drank unprocessed milk?"
                        });
                });

            modelBuilder.Entity("BBIS.Domain.Models.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BloodType")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("CivilStatus")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("varchar(25)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(7)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientIdNo")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Rh")
                        .HasColumnType("varchar(13)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PatientId");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Reservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForAdult")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Membership")
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientType")
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("PreviousNoOfUnitsTransfused")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PreviousTransfusionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PriorityLevel")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("RequestedBy")
                        .HasColumnType("varchar(55)");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoomNo")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ReservationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.ReservationChecklist", b =>
                {
                    b.Property<Guid>("ReservationChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodComponentChecklistId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationItemId")
                        .HasColumnType("char(36)");

                    b.HasKey("ReservationChecklistId");

                    b.HasIndex("BloodComponentChecklistId");

                    b.HasIndex("ReservationItemId");

                    b.ToTable("ReservationChecklist", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.ReservationItem", b =>
                {
                    b.Property<Guid>("ReservationItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DonorUnitSerialNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("InventoryItemId")
                        .HasColumnType("char(36)");

                    b.Property<string>("OtherNotes")
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Volume")
                        .HasColumnType("double");

                    b.HasKey("ReservationItemId");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("DonorTransactionId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationItem", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleName")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("489abc53-af8a-4914-bd21-7d99c26e2e33"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("c2f7694a-1d5e-4754-8575-2c62cbfdf627"),
                            RoleName = "DonorAdmin"
                        },
                        new
                        {
                            RoleId = new Guid("9922d75f-0f7a-4fb2-ab1b-5f06b118136c"),
                            RoleName = "InitialScreener"
                        },
                        new
                        {
                            RoleId = new Guid("22ee22cd-9580-4d5c-8e90-2d615283df1e"),
                            RoleName = "PhysicalExamScreener"
                        },
                        new
                        {
                            RoleId = new Guid("69e19e84-eeae-4361-bf8d-53456def3994"),
                            RoleName = "BloodCollector"
                        },
                        new
                        {
                            RoleId = new Guid("b42f4287-089a-41f9-89ef-a5a3f474f754"),
                            RoleName = "InventoryUser"
                        },
                        new
                        {
                            RoleId = new Guid("84148d25-7e25-4bdc-bfb5-d0f3cd729ab7"),
                            RoleName = "RequisitionUser"
                        },
                        new
                        {
                            RoleId = new Guid("c3f8818a-7a67-4d54-ba8e-3a5bd247e730"),
                            RoleName = "DonorEvent"
                        });
                });

            modelBuilder.Entity("BBIS.Domain.Models.Signatory", b =>
                {
                    b.Property<Guid>("SignatoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LicenseNo")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PositionPrefix")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("SignatoryId");

                    b.ToTable("Signatory", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.TestOrder", b =>
                {
                    b.Property<Guid>("TestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PerformedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("TestCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TestOrderNumber")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ValidatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("TestOrderId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReservationId");

                    b.ToTable("TestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.TestOrderType", b =>
                {
                    b.Property<Guid>("TestOrderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("TestOrderTypeId");

                    b.ToTable("TestOrderType", (string)null);

                    b.HasData(
                        new
                        {
                            TestOrderTypeId = new Guid("722bcb71-9a94-4734-857e-68ddb2711259"),
                            Code = "BTyping",
                            Description = "Blood Typing",
                            IsActive = true,
                            Name = "Blood Typing"
                        },
                        new
                        {
                            TestOrderTypeId = new Guid("3b382719-3167-4ccd-941e-1cd6e1952372"),
                            Code = "BScreen",
                            Description = "Blood Screening",
                            IsActive = true,
                            Name = "Blood Screening"
                        },
                        new
                        {
                            TestOrderTypeId = new Guid("5092b84e-ed91-4370-9984-42392ffa97f4"),
                            Code = "Coombs",
                            Description = "Coombs Test",
                            IsActive = true,
                            Name = "Coombs Test"
                        });
                });

            modelBuilder.Entity("BBIS.Domain.Models.Transfusion", b =>
                {
                    b.Property<Guid>("TransfusionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("HookedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MedicationGiven")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RemovedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationItemId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("TransfusionEnded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransfusionNotes")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("TransfusionStarted")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransfusionStatus")
                        .HasColumnType("varchar(15)");

                    b.HasKey("TransfusionId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ReservationItemId")
                        .IsUnique();

                    b.ToTable("Transfusion", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.TransfusionVitalSign", b =>
                {
                    b.Property<Guid>("VitalSignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodPressure")
                        .HasColumnType("varchar(10)");

                    b.Property<double>("PulseRate")
                        .HasColumnType("double");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(250)");

                    b.Property<double>("RespiratoryRate")
                        .HasColumnType("double");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.Property<Guid>("TransfusionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("VitalSignType")
                        .HasColumnType("varchar(20)");

                    b.HasKey("VitalSignId");

                    b.HasIndex("TransfusionId");

                    b.ToTable("TransfusionVitalSign", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.UserAccount", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("ChangePasswordOnLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("UserAccountId");

                    b.ToTable("UserAccount", (string)null);

                    b.HasData(
                        new
                        {
                            UserAccountId = new Guid("057f1f23-3015-4e71-81fc-0bae7f1db34b"),
                            ChangePasswordOnLogin = false,
                            EmailAddress = "serallain@gmail.com",
                            Firstname = "Admin",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Default",
                            Password = "52cMcbtmJdCm0zhkH0ZQJK6xThufij3Hk7SGN1Z0Kf8=",
                            PasswordSalt = "ay94yItGEYzB02M7QkJ2CaZMs6CvuZI5EVMyE/5+",
                            UpdatedAt = new DateTime(2022, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("057f1f23-3015-4e71-81fc-0bae7f1db34b"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("BBIS.Domain.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserRoleId = new Guid("ac4ad7ff-6169-41ed-8daa-1665d7d38d85"),
                            RoleId = new Guid("489abc53-af8a-4914-bd21-7d99c26e2e33"),
                            UserAccountId = new Guid("057f1f23-3015-4e71-81fc-0bae7f1db34b")
                        });
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodComponentChecklist", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodComponent", "BloodComponent")
                        .WithMany("BloodComponentChecklists")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodComponent");
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodScreeningTestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.TestOrder", "TestOrder")
                        .WithOne("BloodScreeningTestOrder")
                        .HasForeignKey("BBIS.Domain.Models.BloodScreeningTestOrder", "TestOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TestOrder");
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodTypingTestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.TestOrder", "TestOrder")
                        .WithOne("BloodTypingTestOrder")
                        .HasForeignKey("BBIS.Domain.Models.BloodTypingTestOrder", "TestOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TestOrder");
                });

            modelBuilder.Entity("BBIS.Domain.Models.CoombsTestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.TestOrder", "TestOrder")
                        .WithOne("CoombsTestOrder")
                        .HasForeignKey("BBIS.Domain.Models.CoombsTestOrder", "TestOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TestOrder");
                });

            modelBuilder.Entity("BBIS.Domain.Models.CrossMatchTestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodComponent", "BloodComponent")
                        .WithMany("CrossMatchTestOrders")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithMany("CrossMatchTestOrders")
                        .HasForeignKey("DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.TestOrder", "TestOrder")
                        .WithMany("CrossMatchTestOrders")
                        .HasForeignKey("TestOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodComponent");

                    b.Navigation("DonorTransaction");

                    b.Navigation("TestOrder");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorBloodCollection", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithOne("DonorBloodCollection")
                        .HasForeignKey("BBIS.Domain.Models.DonorBloodCollection", "DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.UserAccount", "UserAccount")
                        .WithMany("DonorBloodCollections")
                        .HasForeignKey("FacilitatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DonorBloodCollection_FacilitatedById");

                    b.Navigation("DonorTransaction");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorDeferral", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithOne("DonorDeferral")
                        .HasForeignKey("BBIS.Domain.Models.DonorDeferral", "DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonorTransaction");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorInitialScreening", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithOne("DonorInitialScreening")
                        .HasForeignKey("BBIS.Domain.Models.DonorInitialScreening", "DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonorTransaction");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorMedicalHistory", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorRegistration", "DonorRegistration")
                        .WithMany("DonorMedicalHistories")
                        .HasForeignKey("DonorRegistrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.MedicalQuestionnaire", "MedicalQuestionnaire")
                        .WithMany("DonorMedicalHistories")
                        .HasForeignKey("MedicalQuestionnaireId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonorRegistration");

                    b.Navigation("MedicalQuestionnaire");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorPhysicalExamination", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithOne("DonorPhysicalExamination")
                        .HasForeignKey("BBIS.Domain.Models.DonorPhysicalExamination", "DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonorTransaction");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorRecentDonation", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Donor", "Donor")
                        .WithMany("DonorRecentDonations")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithOne("DonorTestOrder")
                        .HasForeignKey("BBIS.Domain.Models.DonorTestOrder", "DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonorTransaction");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTestOrderTestType", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodTestType", "BloodTestType")
                        .WithMany("DonorTestOrderTestTypes")
                        .HasForeignKey("BloodTestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.DonorTestOrder", "DonorTestOrder")
                        .WithMany("DonorTestOrderTestTypes")
                        .HasForeignKey("DonorTestOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodTestType");

                    b.Navigation("DonorTestOrder");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTransaction", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Donor", "Donor")
                        .WithMany("DonorTransactions")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.DonorRegistration", "DonorRegistration")
                        .WithMany("DonorTransactions")
                        .HasForeignKey("DonorRegistrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("DonorRegistration");
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventoryItem", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodComponent", "BloodComponent")
                        .WithMany("InventoryItems")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.InventorySource", "InventorySource")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventorySourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodComponent");

                    b.Navigation("InventorySource");
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventorySource", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithMany("InventorySources")
                        .HasForeignKey("DonorTranctionId")
                        .HasConstraintName("FK_InventorySource_DonorTranctionId");

                    b.HasOne("BBIS.Domain.Models.Institution", "Institution")
                        .WithMany("InventorySources")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DonorTransaction");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("BBIS.Domain.Models.LookupOption", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Lookup", "Lookup")
                        .WithMany("LookupOptions")
                        .HasForeignKey("LookupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lookup");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Reservation", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Patient", "Patient")
                        .WithMany("Reservations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BBIS.Domain.Models.ReservationChecklist", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodComponentChecklist", "BloodComponentChecklist")
                        .WithMany("ReservationChecklists")
                        .HasForeignKey("BloodComponentChecklistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.ReservationItem", "ReservationItem")
                        .WithMany("ReservationChecklists")
                        .HasForeignKey("ReservationItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodComponentChecklist");

                    b.Navigation("ReservationItem");
                });

            modelBuilder.Entity("BBIS.Domain.Models.ReservationItem", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodComponent", "BloodComponent")
                        .WithMany("ReservationItems")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithMany("ReservationItems")
                        .HasForeignKey("DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.InventoryItem", "InventoryItem")
                        .WithMany("ReservationItems")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.Reservation", "Reservation")
                        .WithMany("ReservationItems")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodComponent");

                    b.Navigation("DonorTransaction");

                    b.Navigation("InventoryItem");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("BBIS.Domain.Models.TestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Patient", "Patient")
                        .WithMany("TestOrders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.Reservation", "Reservation")
                        .WithMany("TestOrders")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Transfusion", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Reservation", "Reservation")
                        .WithMany("Transfusions")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.ReservationItem", "ReservationItem")
                        .WithOne("Transfusion")
                        .HasForeignKey("BBIS.Domain.Models.Transfusion", "ReservationItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("ReservationItem");
                });

            modelBuilder.Entity("BBIS.Domain.Models.TransfusionVitalSign", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Transfusion", "Transfusion")
                        .WithMany("TransfusionVitalSigns")
                        .HasForeignKey("TransfusionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Transfusion");
                });

            modelBuilder.Entity("BBIS.Domain.Models.UserRole", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.UserAccount", "UserAccount")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodComponent", b =>
                {
                    b.Navigation("BloodComponentChecklists");

                    b.Navigation("CrossMatchTestOrders");

                    b.Navigation("InventoryItems");

                    b.Navigation("ReservationItems");
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodComponentChecklist", b =>
                {
                    b.Navigation("ReservationChecklists");
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodTestType", b =>
                {
                    b.Navigation("DonorTestOrderTestTypes");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Donor", b =>
                {
                    b.Navigation("DonorRecentDonations");

                    b.Navigation("DonorTransactions");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorRegistration", b =>
                {
                    b.Navigation("DonorMedicalHistories");

                    b.Navigation("DonorTransactions");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTestOrder", b =>
                {
                    b.Navigation("DonorTestOrderTestTypes");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTransaction", b =>
                {
                    b.Navigation("CrossMatchTestOrders");

                    b.Navigation("DonorBloodCollection");

                    b.Navigation("DonorDeferral");

                    b.Navigation("DonorInitialScreening");

                    b.Navigation("DonorPhysicalExamination");

                    b.Navigation("DonorTestOrder");

                    b.Navigation("InventorySources");

                    b.Navigation("ReservationItems");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Institution", b =>
                {
                    b.Navigation("InventorySources");
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventoryItem", b =>
                {
                    b.Navigation("ReservationItems");
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventorySource", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Lookup", b =>
                {
                    b.Navigation("LookupOptions");
                });

            modelBuilder.Entity("BBIS.Domain.Models.MedicalQuestionnaire", b =>
                {
                    b.Navigation("DonorMedicalHistories");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Patient", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("TestOrders");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Reservation", b =>
                {
                    b.Navigation("ReservationItems");

                    b.Navigation("TestOrders");

                    b.Navigation("Transfusions");
                });

            modelBuilder.Entity("BBIS.Domain.Models.ReservationItem", b =>
                {
                    b.Navigation("ReservationChecklists");

                    b.Navigation("Transfusion");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BBIS.Domain.Models.TestOrder", b =>
                {
                    b.Navigation("BloodScreeningTestOrder");

                    b.Navigation("BloodTypingTestOrder");

                    b.Navigation("CoombsTestOrder");

                    b.Navigation("CrossMatchTestOrders");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Transfusion", b =>
                {
                    b.Navigation("TransfusionVitalSigns");
                });

            modelBuilder.Entity("BBIS.Domain.Models.UserAccount", b =>
                {
                    b.Navigation("DonorBloodCollections");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
