// <auto-generated />
using System;
using BBIS.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BBIS.Database.Migrations
{
    [DbContext(typeof(BBDbContext))]
    [Migration("20230112074816_Create_Database")]
    partial class Create_Database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BBIS.Domain.Models.ApplicationSetting", b =>
                {
                    b.Property<Guid>("ApplicationSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SettingKey")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SettingValue")
                        .HasColumnType("varchar(100)");

                    b.HasKey("ApplicationSettingId");

                    b.ToTable("ApplicationSetting", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodComponent", b =>
                {
                    b.Property<Guid>("BloodComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("ExpiryInDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NotifyOnDaysBefore")
                        .HasColumnType("int");

                    b.HasKey("BloodComponentId");

                    b.ToTable("BloodComponent", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodComponentChecklist", b =>
                {
                    b.Property<Guid>("BloodComponentChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ChecklistDescription")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAdult")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BloodComponentChecklistId");

                    b.HasIndex("BloodComponentId");

                    b.ToTable("BloodComponentChecklist", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodScreeningTestOrder", b =>
                {
                    b.Property<Guid>("BloodScreeningTestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Result")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("TestOrderId")
                        .HasColumnType("char(36)");

                    b.HasKey("BloodScreeningTestOrderId");

                    b.HasIndex("TestOrderId")
                        .IsUnique();

                    b.ToTable("BloodScreeningTestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodTestType", b =>
                {
                    b.Property<Guid>("BloodTestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeName")
                        .HasColumnType("varchar(80)");

                    b.HasKey("BloodTestTypeId");

                    b.ToTable("BloodTestType", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodTypingTestOrder", b =>
                {
                    b.Property<Guid>("BloodTypingTestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodRh")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BloodType")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Control")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FTAntiA")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FTAntiAB")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FTAntiB")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FTAntiD")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FTAntiD2")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RTACells")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RTBCells")
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("TestOrderId")
                        .HasColumnType("char(36)");

                    b.HasKey("BloodTypingTestOrderId");

                    b.HasIndex("TestOrderId")
                        .IsUnique();

                    b.ToTable("BloodTypingTestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.CoombsTestOrder", b =>
                {
                    b.Property<Guid>("CoombsTestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DATResult")
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IATResult")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("TestOrderId")
                        .HasColumnType("char(36)");

                    b.HasKey("CoombsTestOrderId");

                    b.HasIndex("TestOrderId")
                        .IsUnique();

                    b.ToTable("CoombsTestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.CrossMatchTestOrder", b =>
                {
                    b.Property<Guid>("CrossMatchTestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CrossMatchType")
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DonorUnitSerialNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LISS_AGH")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Result")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("TestOrderId")
                        .HasColumnType("char(36)");

                    b.HasKey("CrossMatchTestOrderId");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("DonorTransactionId");

                    b.HasIndex("TestOrderId");

                    b.ToTable("CrossMatchTestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Donor", b =>
                {
                    b.Property<Guid>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressBarangay")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("AddressMunicipality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AddressProvinceOrCity")
                        .IsRequired()
                        .HasColumnType("varchar(70)");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressZipcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CivilStatus")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyIdNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Education")
                        .HasColumnType("varchar(70)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OtherNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PRCNo")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Religion")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("SchoolIdNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SssGsisBirNo")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("TelNo")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("WorkName")
                        .HasColumnType("varchar(90)");

                    b.HasKey("DonorId");

                    b.ToTable("Donor", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorBloodCollection", b =>
                {
                    b.Property<Guid>("DonorBloodCollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("CollectedBloodAmount")
                        .HasColumnType("double");

                    b.Property<string>("CollectionSubType")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("CollectionType")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FacilitatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("MedicationGiven")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UnitOfMeasurement")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UnwellReason")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DonorBloodCollectionId");

                    b.HasIndex("DonorTransactionId")
                        .IsUnique();

                    b.HasIndex("FacilitatedById");

                    b.ToTable("DonorBloodCollection", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorDeferral", b =>
                {
                    b.Property<Guid>("DonorDeferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DeferralStatus")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DonorDeferralId");

                    b.HasIndex("DonorTransactionId")
                        .IsUnique();

                    b.ToTable("DonorDeferral", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorInitialScreening", b =>
                {
                    b.Property<Guid>("DonorInitialScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodType")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DonationType")
                        .HasColumnType("varchar(25)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<double>("HCT")
                        .HasColumnType("double");

                    b.Property<double>("HGB")
                        .HasColumnType("double");

                    b.Property<string>("InHouseTypeValue")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MobileBloodDonationOrganizer")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileBloodDonationPlace")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameOfPatient")
                        .HasColumnType("varchar(100)");

                    b.Property<double>("PLTCount")
                        .HasColumnType("double");

                    b.Property<string>("PatientBloodType")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("PatientHospital")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatientNoOfUnits")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PatientWBOrComponent")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PrcOffice")
                        .HasColumnType("varchar(70)");

                    b.Property<double>("RBC")
                        .HasColumnType("double");

                    b.Property<double>("SPGR")
                        .HasColumnType("double");

                    b.Property<Guid>("ScreenById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ScreenDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("WBC")
                        .HasColumnType("double");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("DonorInitialScreeningId");

                    b.HasIndex("DonorTransactionId")
                        .IsUnique();

                    b.ToTable("DonorInitialScreening", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorMedicalHistory", b =>
                {
                    b.Property<Guid>("DonorMedicalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Answer")
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("DonorRegistrationId")
                        .HasColumnType("char(36)");

                    b.Property<int>("MedicalQuestionnaireId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DonorMedicalHistoryId");

                    b.HasIndex("DonorRegistrationId");

                    b.HasIndex("MedicalQuestionnaireId");

                    b.ToTable("DonorMedicalHistory", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorPhysicalExamination", b =>
                {
                    b.Property<Guid>("DonorPhysicalExaminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodBagType")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BloodPressure")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("DateOfExamination")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoctorName")
                        .HasColumnType("varchar(60)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FacilitatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("FailedRemarks")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("GeneralStatus")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HEENT")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HeartAndLungs")
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Pulse")
                        .HasColumnType("double");

                    b.Property<string>("ResultStatus")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Skin")
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.HasKey("DonorPhysicalExaminationId");

                    b.HasIndex("DonorTransactionId")
                        .IsUnique();

                    b.ToTable("DonorPhysicalExamination", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorRecentDonation", b =>
                {
                    b.Property<Guid>("DonorRecentDonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Agency")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("DateOfRecentDonation")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("NumberOfDonation")
                        .HasColumnType("int");

                    b.Property<string>("PlaceOfRecentDonation")
                        .HasColumnType("varchar(90)");

                    b.HasKey("DonorRecentDonationId");

                    b.HasIndex("DonorId");

                    b.ToTable("DonorRecentDonation", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorRegistration", b =>
                {
                    b.Property<Guid>("DonorRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressBarangay")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("AddressMunicipality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AddressProvinceOrCity")
                        .IsRequired()
                        .HasColumnType("varchar(70)");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressZipcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CivilStatus")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyIdNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Education")
                        .HasColumnType("varchar(70)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasColumnType("varchar(90)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OtherNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PRCNo")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Religion")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("SchoolIdNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SssGsisBirNo")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("TelNo")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("WorkName")
                        .HasColumnType("varchar(90)");

                    b.HasKey("DonorRegistrationId");

                    b.ToTable("DonorRegistration", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTestOrder", b =>
                {
                    b.Property<Guid>("DonorTestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("TestCompleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("DonorTestOrderId");

                    b.HasIndex("DonorTransactionId")
                        .IsUnique();

                    b.ToTable("DonorTestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTestOrderTestType", b =>
                {
                    b.Property<Guid>("DonorTestOrderTestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodTestTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DonorTestOrderId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsReactive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(75)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("DonorTestOrderTestTypeId");

                    b.HasIndex("BloodTestTypeId");

                    b.HasIndex("DonorTestOrderId");

                    b.ToTable("DonorTestOrderTestType", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTransaction", b =>
                {
                    b.Property<Guid>("DonorTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("BloodIsSafeToTransfuse")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BloodRh")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("DOHNBBNetsBarcode")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("DateOfDonation")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DonorRegistrationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DonorStatus")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("FinalBloodType")
                        .HasColumnType("varchar(4)");

                    b.Property<bool>("IsOffline")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSync")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PRCBloodDonorNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UnitSerialNumber")
                        .HasColumnType("varchar(30)");

                    b.HasKey("DonorTransactionId");

                    b.HasIndex("DonorId");

                    b.HasIndex("DonorRegistrationId");

                    b.ToTable("DonorTransaction", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Institution", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(80)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("InstitutionId");

                    b.ToTable("Institution", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventoryItem", b =>
                {
                    b.Property<Guid>("InventoryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodRh")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BloodType")
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("InventorySourceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("NotifyBeforeExpireOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UnitMeasure")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("UnitSerialNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Volume")
                        .HasColumnType("double");

                    b.HasKey("InventoryItemId");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("InventorySourceId");

                    b.ToTable("InventoryItem", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventorySource", b =>
                {
                    b.Property<Guid>("InventorySourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DonorTranctionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsExternalSource")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("InventorySourceId");

                    b.HasIndex("DonorTranctionId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InventorySource", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Lookup", b =>
                {
                    b.Property<int>("LookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LookupKey")
                        .HasColumnType("varchar(30)");

                    b.HasKey("LookupId");

                    b.ToTable("Lookup", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.LookupOption", b =>
                {
                    b.Property<int>("LookupOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LookupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(50)");

                    b.HasKey("LookupOptionId");

                    b.HasIndex("LookupId");

                    b.ToTable("LookupOption", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.MedicalQuestionnaire", b =>
                {
                    b.Property<int>("MedicalQuestionnaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GenderOption")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("HeaderText")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("QuestionEnglishText")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("QuestionTagalogText")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.HasKey("MedicalQuestionnaireId");

                    b.ToTable("MedicalQuestionnaire", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BloodType")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("CivilStatus")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("varchar(25)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(7)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PatientIdNo")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Rh")
                        .HasColumnType("varchar(13)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PatientId");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Reservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForAdult")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Membership")
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientType")
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("PreviousNoOfUnitsTransfused")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PreviousTransfusionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PriorityLevel")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("RequestedBy")
                        .HasColumnType("varchar(55)");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoomNo")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ReservationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.ReservationChecklist", b =>
                {
                    b.Property<Guid>("ReservationChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodComponentChecklistId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationItemId")
                        .HasColumnType("char(36)");

                    b.HasKey("ReservationChecklistId");

                    b.HasIndex("BloodComponentChecklistId");

                    b.HasIndex("ReservationItemId");

                    b.ToTable("ReservationChecklist", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.ReservationItem", b =>
                {
                    b.Property<Guid>("ReservationItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodComponentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DonorTransactionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DonorUnitSerialNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("InventoryItemId")
                        .HasColumnType("char(36)");

                    b.Property<string>("OtherNotes")
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Volume")
                        .HasColumnType("double");

                    b.HasKey("ReservationItemId");

                    b.HasIndex("BloodComponentId");

                    b.HasIndex("DonorTransactionId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationItem", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleName")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Signatory", b =>
                {
                    b.Property<Guid>("SignatoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LicenseNo")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PositionPrefix")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("SignatoryId");

                    b.ToTable("Signatory", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.TestOrder", b =>
                {
                    b.Property<Guid>("TestOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PerformedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("TestCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TestOrderNumber")
                        .HasColumnType("varchar(15)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ValidatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("TestOrderId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReservationId");

                    b.ToTable("TestOrder", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.TestOrderType", b =>
                {
                    b.Property<Guid>("TestOrderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("TestOrderTypeId");

                    b.ToTable("TestOrderType", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.Transfusion", b =>
                {
                    b.Property<Guid>("TransfusionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("HookedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MedicationGiven")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RemovedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationItemId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("TransfusionEnded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransfusionNotes")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("TransfusionStarted")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransfusionStatus")
                        .HasColumnType("varchar(15)");

                    b.HasKey("TransfusionId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ReservationItemId")
                        .IsUnique();

                    b.ToTable("Transfusion", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.TransfusionVitalSign", b =>
                {
                    b.Property<Guid>("VitalSignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodPressure")
                        .HasColumnType("varchar(10)");

                    b.Property<double>("PulseRate")
                        .HasColumnType("double");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(250)");

                    b.Property<double>("RespiratoryRate")
                        .HasColumnType("double");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.Property<Guid>("TransfusionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("VitalSignType")
                        .HasColumnType("varchar(20)");

                    b.HasKey("VitalSignId");

                    b.HasIndex("TransfusionId");

                    b.ToTable("TransfusionVitalSign", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.UserAccount", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("ChangePasswordOnLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("UserAccountId");

                    b.ToTable("UserAccount", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodComponentChecklist", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodComponent", "BloodComponent")
                        .WithMany("BloodComponentChecklists")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodComponent");
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodScreeningTestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.TestOrder", "TestOrder")
                        .WithOne("BloodScreeningTestOrder")
                        .HasForeignKey("BBIS.Domain.Models.BloodScreeningTestOrder", "TestOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TestOrder");
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodTypingTestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.TestOrder", "TestOrder")
                        .WithOne("BloodTypingTestOrder")
                        .HasForeignKey("BBIS.Domain.Models.BloodTypingTestOrder", "TestOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TestOrder");
                });

            modelBuilder.Entity("BBIS.Domain.Models.CoombsTestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.TestOrder", "TestOrder")
                        .WithOne("CoombsTestOrder")
                        .HasForeignKey("BBIS.Domain.Models.CoombsTestOrder", "TestOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TestOrder");
                });

            modelBuilder.Entity("BBIS.Domain.Models.CrossMatchTestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodComponent", "BloodComponent")
                        .WithMany("CrossMatchTestOrders")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithMany("CrossMatchTestOrders")
                        .HasForeignKey("DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.TestOrder", "TestOrder")
                        .WithMany("CrossMatchTestOrders")
                        .HasForeignKey("TestOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodComponent");

                    b.Navigation("DonorTransaction");

                    b.Navigation("TestOrder");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorBloodCollection", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithOne("DonorBloodCollection")
                        .HasForeignKey("BBIS.Domain.Models.DonorBloodCollection", "DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.UserAccount", "UserAccount")
                        .WithMany("DonorBloodCollections")
                        .HasForeignKey("FacilitatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DonorBloodCollection_FacilitatedById");

                    b.Navigation("DonorTransaction");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorDeferral", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithOne("DonorDeferral")
                        .HasForeignKey("BBIS.Domain.Models.DonorDeferral", "DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonorTransaction");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorInitialScreening", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithOne("DonorInitialScreening")
                        .HasForeignKey("BBIS.Domain.Models.DonorInitialScreening", "DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonorTransaction");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorMedicalHistory", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorRegistration", "DonorRegistration")
                        .WithMany("DonorMedicalHistories")
                        .HasForeignKey("DonorRegistrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.MedicalQuestionnaire", "MedicalQuestionnaire")
                        .WithMany("DonorMedicalHistories")
                        .HasForeignKey("MedicalQuestionnaireId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonorRegistration");

                    b.Navigation("MedicalQuestionnaire");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorPhysicalExamination", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithOne("DonorPhysicalExamination")
                        .HasForeignKey("BBIS.Domain.Models.DonorPhysicalExamination", "DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonorTransaction");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorRecentDonation", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Donor", "Donor")
                        .WithMany("DonorRecentDonations")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithOne("DonorTestOrder")
                        .HasForeignKey("BBIS.Domain.Models.DonorTestOrder", "DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonorTransaction");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTestOrderTestType", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodTestType", "BloodTestType")
                        .WithMany("DonorTestOrderTestTypes")
                        .HasForeignKey("BloodTestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.DonorTestOrder", "DonorTestOrder")
                        .WithMany("DonorTestOrderTestTypes")
                        .HasForeignKey("DonorTestOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodTestType");

                    b.Navigation("DonorTestOrder");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTransaction", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Donor", "Donor")
                        .WithMany("DonorTransactions")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.DonorRegistration", "DonorRegistration")
                        .WithMany("DonorTransactions")
                        .HasForeignKey("DonorRegistrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("DonorRegistration");
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventoryItem", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodComponent", "BloodComponent")
                        .WithMany("InventoryItems")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.InventorySource", "InventorySource")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventorySourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodComponent");

                    b.Navigation("InventorySource");
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventorySource", b =>
                {
                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithMany("InventorySources")
                        .HasForeignKey("DonorTranctionId")
                        .HasConstraintName("FK_InventorySource_DonorTranctionId");

                    b.HasOne("BBIS.Domain.Models.Institution", "Institution")
                        .WithMany("InventorySources")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DonorTransaction");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("BBIS.Domain.Models.LookupOption", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Lookup", "Lookup")
                        .WithMany("LookupOptions")
                        .HasForeignKey("LookupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lookup");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Reservation", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Patient", "Patient")
                        .WithMany("Reservations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BBIS.Domain.Models.ReservationChecklist", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodComponentChecklist", "BloodComponentChecklist")
                        .WithMany("ReservationChecklists")
                        .HasForeignKey("BloodComponentChecklistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.ReservationItem", "ReservationItem")
                        .WithMany("ReservationChecklists")
                        .HasForeignKey("ReservationItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodComponentChecklist");

                    b.Navigation("ReservationItem");
                });

            modelBuilder.Entity("BBIS.Domain.Models.ReservationItem", b =>
                {
                    b.HasOne("BBIS.Domain.Models.BloodComponent", "BloodComponent")
                        .WithMany("ReservationItems")
                        .HasForeignKey("BloodComponentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.DonorTransaction", "DonorTransaction")
                        .WithMany("ReservationItems")
                        .HasForeignKey("DonorTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.InventoryItem", "InventoryItem")
                        .WithMany("ReservationItems")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.Reservation", "Reservation")
                        .WithMany("ReservationItems")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodComponent");

                    b.Navigation("DonorTransaction");

                    b.Navigation("InventoryItem");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("BBIS.Domain.Models.TestOrder", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Patient", "Patient")
                        .WithMany("TestOrders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.Reservation", "Reservation")
                        .WithMany("TestOrders")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Transfusion", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Reservation", "Reservation")
                        .WithMany("Transfusions")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.ReservationItem", "ReservationItem")
                        .WithOne("Transfusion")
                        .HasForeignKey("BBIS.Domain.Models.Transfusion", "ReservationItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("ReservationItem");
                });

            modelBuilder.Entity("BBIS.Domain.Models.TransfusionVitalSign", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Transfusion", "Transfusion")
                        .WithMany("TransfusionVitalSigns")
                        .HasForeignKey("TransfusionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Transfusion");
                });

            modelBuilder.Entity("BBIS.Domain.Models.UserRole", b =>
                {
                    b.HasOne("BBIS.Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BBIS.Domain.Models.UserAccount", "UserAccount")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodComponent", b =>
                {
                    b.Navigation("BloodComponentChecklists");

                    b.Navigation("CrossMatchTestOrders");

                    b.Navigation("InventoryItems");

                    b.Navigation("ReservationItems");
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodComponentChecklist", b =>
                {
                    b.Navigation("ReservationChecklists");
                });

            modelBuilder.Entity("BBIS.Domain.Models.BloodTestType", b =>
                {
                    b.Navigation("DonorTestOrderTestTypes");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Donor", b =>
                {
                    b.Navigation("DonorRecentDonations");

                    b.Navigation("DonorTransactions");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorRegistration", b =>
                {
                    b.Navigation("DonorMedicalHistories");

                    b.Navigation("DonorTransactions");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTestOrder", b =>
                {
                    b.Navigation("DonorTestOrderTestTypes");
                });

            modelBuilder.Entity("BBIS.Domain.Models.DonorTransaction", b =>
                {
                    b.Navigation("CrossMatchTestOrders");

                    b.Navigation("DonorBloodCollection");

                    b.Navigation("DonorDeferral");

                    b.Navigation("DonorInitialScreening");

                    b.Navigation("DonorPhysicalExamination");

                    b.Navigation("DonorTestOrder");

                    b.Navigation("InventorySources");

                    b.Navigation("ReservationItems");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Institution", b =>
                {
                    b.Navigation("InventorySources");
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventoryItem", b =>
                {
                    b.Navigation("ReservationItems");
                });

            modelBuilder.Entity("BBIS.Domain.Models.InventorySource", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Lookup", b =>
                {
                    b.Navigation("LookupOptions");
                });

            modelBuilder.Entity("BBIS.Domain.Models.MedicalQuestionnaire", b =>
                {
                    b.Navigation("DonorMedicalHistories");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Patient", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("TestOrders");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Reservation", b =>
                {
                    b.Navigation("ReservationItems");

                    b.Navigation("TestOrders");

                    b.Navigation("Transfusions");
                });

            modelBuilder.Entity("BBIS.Domain.Models.ReservationItem", b =>
                {
                    b.Navigation("ReservationChecklists");

                    b.Navigation("Transfusion");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BBIS.Domain.Models.TestOrder", b =>
                {
                    b.Navigation("BloodScreeningTestOrder");

                    b.Navigation("BloodTypingTestOrder");

                    b.Navigation("CoombsTestOrder");

                    b.Navigation("CrossMatchTestOrders");
                });

            modelBuilder.Entity("BBIS.Domain.Models.Transfusion", b =>
                {
                    b.Navigation("TransfusionVitalSigns");
                });

            modelBuilder.Entity("BBIS.Domain.Models.UserAccount", b =>
                {
                    b.Navigation("DonorBloodCollections");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
